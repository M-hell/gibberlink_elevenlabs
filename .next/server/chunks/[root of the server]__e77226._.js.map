{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 183, "column": 0}, "map": {"version":3,"sources":["file://D%3A/Web%20Development/Chaicodebackend/Soundwave%20generator/gibberlink/src/app/api/chat/route.ts"],"sourcesContent":["import { PostHog } from 'posthog-node'\r\nimport { NextResponse } from 'next/server'\r\nimport { HfInference } from \"@huggingface/inference\";\r\n\r\nconst phClient = new PostHog(\"phc_mX1UQCMVS3TRTbNql9DwdaGGxtNhHnHwSSmUPoPzpjH\", {\r\n  host: 'https://us.i.posthog.com',\r\n})\r\n\r\nconst client = new HfInference(process.env.OPENAI_API_KEY);\r\n\r\nexport async function POST(req) {\r\n  try {\r\n    const { messages, agentType, sessionId } = await req.json()\r\n\r\n    const completion = await client.chatCompletion({\r\n      model: 'deepseek-ai/DeepSeek-R1',  // Correctly specifying DeepSeek R1\r\n      messages,\r\n      max_tokens: 500,\r\n      provider: \"together\", // Ensure Together AI supports this model\r\n    })\r\n    console.log('Messages:', messages)\r\n    console.log('Assistant Response:', completion.choices[0].message || 'No response')\r\n\r\n    // Remove everything between and including the think tags\r\n    const responseMessage = completion.choices[0].message;\r\n    if (responseMessage && responseMessage.content) {\r\n      responseMessage.content = responseMessage.content.replace(/<think>.*?<\\/think>/gs, '');\r\n    }\r\n\r\n    return NextResponse.json(responseMessage || { error: 'No AI response' })\r\n  } catch (error) {\r\n    console.error('DeepSeek AI API Error:', error)\r\n    return NextResponse.json({ error: 'AI Service Unavailable' }, { status: 503 })\r\n  }\r\n}"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAEA,MAAM,WAAW,IAAI,wJAAA,CAAA,UAAO,CAAC,mDAAmD;IAC9E,MAAM;AACR;AAEA,MAAM,SAAS,IAAI,6JAAA,CAAA,cAAW,CAAC,QAAQ,GAAG,CAAC,cAAc;AAElD,eAAe,KAAK,GAAG;IAC5B,IAAI;QACF,MAAM,EAAE,QAAQ,EAAE,SAAS,EAAE,SAAS,EAAE,GAAG,MAAM,IAAI,IAAI;QAEzD,MAAM,aAAa,MAAM,OAAO,cAAc,CAAC;YAC7C,OAAO;YACP;YACA,YAAY;YACZ,UAAU;QACZ;QACA,QAAQ,GAAG,CAAC,aAAa;QACzB,QAAQ,GAAG,CAAC,uBAAuB,WAAW,OAAO,CAAC,EAAE,CAAC,OAAO,IAAI;QAEpE,yDAAyD;QACzD,MAAM,kBAAkB,WAAW,OAAO,CAAC,EAAE,CAAC,OAAO;QACrD,IAAI,mBAAmB,gBAAgB,OAAO,EAAE;YAC9C,gBAAgB,OAAO,GAAG,gBAAgB,OAAO,CAAC,OAAO,CAAC,yBAAyB;QACrF;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC,mBAAmB;YAAE,OAAO;QAAiB;IACxE,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,0BAA0B;QACxC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAyB,GAAG;YAAE,QAAQ;QAAI;IAC9E;AACF"}},
    {"offset": {"line": 224, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}