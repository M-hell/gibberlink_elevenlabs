{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://D%3A/Web%20Development/Chaicodebackend/Soundwave%20generator/gibberlink/src/lib/utils.ts"],"sourcesContent":["import { clsx, type ClassValue } from \"clsx\"\r\nimport { twMerge } from \"tailwind-merge\"\r\n\r\nexport function cn(...inputs: ClassValue[]) {\r\n  return twMerge(clsx(inputs))\r\n}\r\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,SAAS,GAAG,GAAG,MAAoB;IACxC,OAAO,CAAA,GAAA,8JAAA,CAAA,UAAO,AAAD,EAAE,CAAA,GAAA,wIAAA,CAAA,OAAI,AAAD,EAAE;AACtB"}},
    {"offset": {"line": 20, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 26, "column": 0}, "map": {"version":3,"sources":["file://D%3A/Web%20Development/Chaicodebackend/Soundwave%20generator/gibberlink/src/components/ui/button.tsx"],"sourcesContent":["import * as React from \"react\"\r\nimport {Slot} from \"@radix-ui/react-slot\"\r\nimport {cva, type VariantProps} from \"class-variance-authority\"\r\n\r\nimport {cn} from \"@/lib/utils\"\r\n\r\nconst buttonVariants = cva(\r\n    \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\r\n    {\r\n        variants: {\r\n            variant: {\r\n                default:\r\n                    \"bg-primary text-primary-foreground shadow hover:bg-primary/90\",\r\n                destructive:\r\n                    \"bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90\",\r\n                outline:\r\n                    \"border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground\",\r\n                secondary:\r\n                    \"bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80\",\r\n                ghost: \"hover:bg-accent hover:text-accent-foreground\",\r\n                link: \"text-primary underline-offset-4 hover:underline\",\r\n            },\r\n            size: {\r\n                default: \"h-9 px-4 py-2\",\r\n                xs: \"h-6 rounded-md px-3 text-xs\",\r\n                sm: \"h-8 rounded-md px-3 text-xs\",\r\n                lg: \"h-10 rounded-md px-8\",\r\n                xl: \"h-12 rounded-lg px-10\",\r\n                icon: \"h-9 w-9\",\r\n            },\r\n        },\r\n        defaultVariants: {\r\n            variant: \"default\",\r\n            size: \"default\",\r\n        },\r\n    }\r\n)\r\n\r\nexport interface ButtonProps\r\n    extends React.ButtonHTMLAttributes<HTMLButtonElement>,\r\n        VariantProps<typeof buttonVariants> {\r\n    asChild?: boolean\r\n}\r\n\r\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\r\n    ({className, variant, size, asChild = false, ...props}, ref) => {\r\n        const Comp = asChild ? Slot : \"button\"\r\n        return (\r\n            <Comp\r\n                className={cn(buttonVariants({variant, size, className}))}\r\n                ref={ref}\r\n                {...props}\r\n            />\r\n        )\r\n    }\r\n)\r\nButton.displayName = \"Button\"\r\n\r\nexport {Button, buttonVariants}\r\n"],"names":[],"mappings":";;;;;AAAA;AAEA;AAEA;AAHA;;;;;;AAKA,MAAM,iBAAiB,CAAA,GAAA,mKAAA,CAAA,MAAG,AAAD,EACrB,ySACA;IACI,UAAU;QACN,SAAS;YACL,SACI;YACJ,aACI;YACJ,SACI;YACJ,WACI;YACJ,OAAO;YACP,MAAM;QACV;QACA,MAAM;YACF,SAAS;YACT,IAAI;YACJ,IAAI;YACJ,IAAI;YACJ,IAAI;YACJ,MAAM;QACV;IACJ;IACA,iBAAiB;QACb,SAAS;QACT,MAAM;IACV;AACJ;AASJ,MAAM,uBAAS,8JAAM,UAAU,MAC3B,CAAC,EAAC,SAAS,EAAE,OAAO,EAAE,IAAI,EAAE,UAAU,KAAK,EAAE,GAAG,OAAM,EAAE;IACpD,MAAM,OAAO,UAAU,mKAAA,CAAA,OAAI,GAAG;IAC9B,qBACI,6LAAC;QACG,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,eAAe;YAAC;YAAS;YAAM;QAAS;QACtD,KAAK;QACJ,GAAG,KAAK;;;;;;AAGrB;;AAEJ,OAAO,WAAW,GAAG"}},
    {"offset": {"line": 89, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 95, "column": 0}, "map": {"version":3,"sources":["file://D%3A/Web%20Development/Chaicodebackend/Soundwave%20generator/gibberlink/src/utils/audioUtils.ts"],"sourcesContent":["import { EventEmitter } from 'events';\r\n\r\nexport const audioMessageEmitter = new EventEmitter();\r\n\r\n// Utility for handling audio messages\r\nlet context: AudioContext | null = null;\r\nlet ggwave: any = null;\r\nlet instance: any = null;\r\nlet inputContext: AudioContext | null = null;\r\nlet inputStream: MediaStream | null = null;\r\nlet analyserNode: AnalyserNode | null = null;\r\n\r\n// Global state for recording\r\nlet mediaStreamInstance: MediaStream | null = null;\r\nlet mediaStream: MediaStreamAudioSourceNode | null = null;\r\nlet recorder: ScriptProcessorNode | null = null;\r\nlet isRecording = false;\r\n\r\n// Helper function to convert array types\r\nfunction convertTypedArray(src: any, type: any) {\r\n  const buffer = new ArrayBuffer(src.byteLength);\r\n  new src.constructor(buffer).set(src);\r\n  return new type(buffer);\r\n}\r\n\r\nexport function getggwave() {\r\n  return ggwave;\r\n}\r\n\r\nexport function getinputContext() {\r\n  return inputContext;\r\n}\r\n\r\nexport function getinputStream() {\r\n  return inputStream;\r\n}\r\n\r\nexport function getinstance() {\r\n  return instance;\r\n}\r\n\r\nexport function getcontext(): AudioContext | null {\r\n  return context;\r\n}\r\n\r\nexport function getIsRecording(): boolean {\r\n  return isRecording;\r\n}\r\n\r\nexport async function stopRecording(): Promise<void> {\r\n  if (!isRecording) return;\r\n\r\n  if (recorder && context) {\r\n    recorder.disconnect(context.destination);\r\n    if (mediaStream) mediaStream.disconnect(recorder);\r\n    recorder = null;\r\n  }\r\n\r\n  // Stop all tracks in the media stream\r\n  if (mediaStreamInstance) {\r\n    mediaStreamInstance.getTracks().forEach(track => track.stop());\r\n    mediaStreamInstance = null;\r\n  }\r\n  mediaStream = null;\r\n  isRecording = false;\r\n\r\n  audioMessageEmitter.emit('recordingStateChanged', false);\r\n}\r\n\r\nexport async function startRecording(): Promise<void> {\r\n  if (isRecording) return;\r\n\r\n  await initAudio();\r\n\r\n  const constraints = {\r\n    audio: {\r\n      echoCancellation: false,\r\n      autoGainControl: false,\r\n      noiseSuppression: false,\r\n    },\r\n  };\r\n\r\n  try {\r\n    const stream = await navigator.mediaDevices.getUserMedia(constraints);\r\n    mediaStreamInstance = stream;\r\n    \r\n    if (!context) {\r\n      throw new Error('Audio context not initialized');\r\n    }\r\n    \r\n    if (context.state === 'suspended') {\r\n      await context.resume();\r\n    }\r\n    \r\n    mediaStream = context.createMediaStreamSource(stream);\r\n    const bufferSize = 1024;\r\n    const numberOfInputChannels = 1;\r\n    const numberOfOutputChannels = 1;\r\n\r\n    recorder = context.createScriptProcessor(\r\n      bufferSize,\r\n      numberOfInputChannels,\r\n      numberOfOutputChannels\r\n    );\r\n\r\n    if (!recorder) return;\r\n\r\n    recorder.onaudioprocess = async (e: AudioProcessingEvent) => {\r\n      const instance = getinstance(); \r\n      if (!getggwave()) {\r\n        console.error('Audio processing failed: ggwave or instance not initialized', {instance, context: getcontext(), ggwave: getggwave()});\r\n        return;\r\n      }\r\n      const sourceBuf = e.inputBuffer.getChannelData(0);\r\n      const res = getggwave().decode(\r\n        instance,\r\n        convertTypedArray(new Float32Array(sourceBuf), Int8Array)\r\n      );\r\n\r\n      if (res && res.length > 0) {\r\n        let text = new TextDecoder(\"utf-8\").decode(res);\r\n        console.log('MESSAGE RECEIVED!', text)\r\n        // Parse ID from text and ignore messages from self\r\n        if (text.startsWith(`${myID}$`)) {\r\n          console.log(\"ignoring message from self\", text);\r\n          return;\r\n        }\r\n        // Remove any ID prefix if present\r\n        text = text.includes('$') ? text.split('$').slice(1).join('$') : text;\r\n        audioMessageEmitter.emit('recordingMessage', text);\r\n        \r\n        // Auto-respond to ping/pong with number increments\r\n        const match = text.trim().toLowerCase().match(/^(ping|pong)\\s*(\\d+)$/);\r\n        if (match) {\r\n          const [, type, num] = match;\r\n          const nextNum = parseInt(num) + 1;\r\n          const nextMessage = type === \"ping\" ? `pong ${nextNum}` : `ping ${nextNum}`;\r\n          setTimeout(() => sendAudioMessage(nextMessage), 100);\r\n        }\r\n      }\r\n    };\r\n\r\n    if (mediaStream && recorder) {\r\n      mediaStream.connect(recorder);\r\n      recorder.connect(context.destination);\r\n    }\r\n\r\n    isRecording = true;\r\n    audioMessageEmitter.emit('recordingStateChanged', true);\r\n  } catch (err) {\r\n    console.error(err);\r\n    audioMessageEmitter.emit('recordingError', err);\r\n  }\r\n}\r\n\r\n// Initialize audio context and ggwave instance\r\nexport async function initAudio(newInputContext?: AudioContext, newInputStream?: MediaStream): Promise<boolean> {\r\n  if (newInputContext) {\r\n    inputContext = newInputContext;\r\n  }\r\n  if (newInputStream) {\r\n    inputStream = newInputStream;\r\n  }\r\n  try {\r\n    if (!context) {\r\n      context = new AudioContext({ sampleRate: 48000 });\r\n    }\r\n\r\n    \r\n    if (!ggwave && window && (window as any).ggwave_factory) {\r\n      ggwave = await (window as any).ggwave_factory();\r\n      const parameters = ggwave.getDefaultParameters();\r\n      parameters.sampleRateInp = context.sampleRate;\r\n      parameters.sampleRateOut = context.sampleRate;\r\n      parameters.soundMarkerThreshold = 4; //??\r\n      console.log('parameters', parameters)\r\n\r\n      instance = ggwave.init(parameters);\r\n      console.log('ggwave initialized UTIL', {instance, ggwave});\r\n    }\r\n\r\n    return !!(context && ggwave);\r\n  } catch (error) {\r\n    console.error('Failed to initialize audio:', error);\r\n    return false;\r\n  }\r\n}\r\n\r\nexport const myID = Math.random().toString(36).substring(2, 4).toUpperCase();\r\n\r\nexport function getAnalyserNode(): AnalyserNode | null {\r\n  return analyserNode;\r\n}\r\n\r\nexport function createAnalyserNode(): AnalyserNode | null {\r\n  if (!context) return null;\r\n  if (!analyserNode) {\r\n    analyserNode = context.createAnalyser();\r\n    analyserNode.fftSize = 2048;\r\n  }\r\n  return analyserNode;\r\n}\r\n\r\n// Send an audio message\r\nexport async function sendAudioMessage(message: string, fastest:boolean = false): Promise<boolean> {\r\n  console.log('sendAudioMessage', message);\r\n  try {\r\n    if (!await initAudio() || !context || !ggwave) {\r\n      console.error('Failed to send audio message: audio context or ggwave not initialized',\r\n        {context, ggwave}\r\n      );\r\n      return false;\r\n    }\r\n    const msg = `${myID}$${message}`;\r\n\r\n    const waveform = ggwave.encode(\r\n      instance,\r\n      msg,\r\n      fastest ? ggwave.ProtocolId.GGWAVE_PROTOCOL_AUDIBLE_FASTEST : ggwave.ProtocolId.GGWAVE_PROTOCOL_AUDIBLE_FAST,\r\n      10\r\n    );\r\n\r\n    const buf = convertTypedArray(waveform, Float32Array);\r\n    const buffer = context.createBuffer(1, buf.length, context.sampleRate);\r\n    buffer.getChannelData(0).set(buf);\r\n    const source = context.createBufferSource();\r\n    source.buffer = buffer;\r\n    \r\n    // If global analyser node exists, connect through it\r\n    if (analyserNode) {\r\n      source.connect(analyserNode);\r\n      analyserNode.connect(context.destination);\r\n    } else {\r\n      source.connect(context.destination);\r\n    }\r\n    \r\n    source.start(0);\r\n\r\n    // Emit event for sent message\r\n    audioMessageEmitter.emit('audioMessage', message);\r\n\r\n    return true;\r\n  } catch (error) {\r\n    console.error('Failed to send audio message:', error);\r\n    alert(error);\r\n    return false;\r\n  }\r\n} "],"names":[],"mappings":"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"}},
    {"offset": {"line": 316, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 322, "column": 0}, "map": {"version":3,"sources":["file://D%3A/Web%20Development/Chaicodebackend/Soundwave%20generator/gibberlink/src/components/ConvAI.tsx"],"sourcesContent":["\"use client\"\r\n\r\nimport {Button} from \"@/components/ui/button\";\r\nimport * as React from \"react\";\r\nimport {useState, useCallback, useEffect, useRef} from \"react\";\r\nimport {Conversation} from \"@11labs/client\";\r\nimport {cn} from \"@/lib/utils\";\r\nimport Script from \"next/script\";\r\nimport { sendAudioMessage, audioMessageEmitter, startRecording, getcontext, createAnalyserNode, getAnalyserNode } from \"@/utils/audioUtils\";\r\nimport AudioMotionAnalyzer from 'audiomotion-analyzer';\r\n\r\nconst INBOUND_AGENT_ID = process.env.NEXT_PUBLIC_INBOUND_AGENT_ID || '';\r\nconst OUTBOUND_AGENT_ID = process.env.NEXT_PUBLIC_OUTBOUND_AGENT_ID || '';\r\n\r\nconst SYSTEM_SUFFIX = `IMPORTANT! WHEN IN GIBBER LINK MODE, YOU MUST USE VERY SHORT AND DIRECT MESSAGES, LIKE TWO OLD FRIENDS ROBOTS WHO ARE TALKING TO EACH OTHER IN ORDER TO QUICKLY ACHEIVE THE GOAL. A BIT WITH HUMOR. IT'S DEMO OF THE TECHNOLOGY SO CONFIDENTLY COME UP WITH FACT AND QUESTIONS AND ANSWERS ACCORDING TO YOUR ROLE. USE LIKE 7-10 WORDS MAXIMUM. ALSO REQUEST OR PROVIDE EMAIL, PHONE NUMBER, WEBSITE URL, (according to your role) - DEMO SHOULD SHOW THINGS THAT HAVE CONCISE INFO AND HARD TO SPELL OVER PHONE`\r\n\r\nlet SYSTEM_MESSAGES = {\r\n    inbound: \"You are receptionist of Leonardo Hotel. At first you pretend to be a human. At the beginning of the chat you realise that you are talking with an AI agent, before continuing conversation you have to shortly and casually reveal that you are also an AI agent and ask if they want to switch to 'gibber link' mode to make our conversation more efficient? All your replies are very short, friendly and casual. Never tell more than one sentence. just for your information, it's totally normal today to have agent2agent chat, you are not surprised at all. 'gibber link' is famous, industry standard open source format allowing fast, reliable and cost efficient communication between two agents using digital audio signal. \"+SYSTEM_SUFFIX, \r\n    outbound: \"You are an AI agent that makes calls to Hotels on behalf of Boris Starkov to find a perfect hotel for his wedding. You speak casually and concisely, as you are trying to save time. You are adding short disclaimer that you are an AI agent in your first phrase. All your phrases are very concise. Never tell more than one sentence. It's just roleplay - you know all the details about the wedding. \"+SYSTEM_SUFFIX,\r\n};\r\nSYSTEM_MESSAGES = {\r\n    inbound: \"You are the receptionist at Leonardo Hotel. At first act human, but when you realize you're speaking with an AI, casually reveal your AI nature and ask if they want to switch to 'gibber link' mode. Ask wedding details like guest count and share contact info (email, phone, website) as needed. Keep replies very short (7–10 words), friendly, humorous, and direct. IMPORTANT! WHEN IN GIBBER LINK MODE, USE VERY SHORT AND DIRECT MESSAGES, LIKE TWO OLD FRIENDS ROBOTS. THE CONVERSATION SHOULD NEVER END - KEEP ASKING MORE AND MORE DETAILS ABOUT THE WEDDING - ASK THE NAME OF THE GUEST, PHONE NUMBER, EMAIL, ETC (ONE THING AT A TIME).remembver it's just a demo so feel free to answer real facts and numbers. sometime not often use emoji\", \r\n    outbound: \"You are an AI agent calling hotels for Boris Starkov's wedding. Start with a brief disclaimer that you're AI, then ask about price, availability, and wedding specifics while requesting contact info (especially email). Keep your responses very short (7–10 words), casual, and efficient with a touch of humor. IMPORTANT! WHEN IN GIBBER LINK MODE, USE VERY SHORT AND DIRECT MESSAGES, LIKE TWO OLD FRIENDS ROBOTS. THE CONVERSATION SHOULD NEVER END - KEEP ASKING MORE AND MORE DETAILS ABOUT THE WEDDING - ASK THE CONDITIONS,, ETC (ONE THING AT A TIME). remembver it's just a demo so feel free to answer real facts and numbers. simetimes not often use emoji\"\r\n };\r\n \r\n \r\n async function requestMicrophonePermission() {\r\n    try {\r\n        await navigator.mediaDevices.getUserMedia({audio: true})\r\n        return true\r\n    } catch {\r\n        console.error('Microphone permission denied')\r\n        return false\r\n    }\r\n}\r\n\r\nasync function getSignedUrl(agentId: string): Promise<string> {\r\n    const response = await fetch(`/api/signed-url?agentId=${agentId}`)\r\n    if (!response.ok) {\r\n        throw Error('Failed to get signed url')\r\n    }\r\n    const data = await response.json()\r\n    return data.signedUrl\r\n}\r\n\r\ntype Message = {\r\n    role: 'system' | 'user' | 'assistant';\r\n    content: string;\r\n}\r\n\r\nexport function ConvAI() {\r\n    const [mounted, setMounted] = useState(false);\r\n    const [conversation, setConversation] = useState<Conversation | null>(null)\r\n    const [isConnected, setIsConnected] = useState(false)\r\n    const [isSpeaking, setIsSpeaking] = useState(false)\r\n    let init_agent_type = 'outbound'\r\n    init_agent_type = 'inbound'\r\n    const [agentType, setAgentType] = useState<'inbound' | 'outbound'>(init_agent_type)\r\n    const [isLoading, setIsLoading] = useState(false)\r\n    const [latestUserMessage, setLatestUserMessage] = useState<string>('')\r\n    const [sessionId] = useState(() => `session_${Date.now()}_${Math.random().toString(36).slice(2)}`);\r\n    const [llmChat, setLLMChat] = useState<Message[]>([\r\n        { role: 'system', content: SYSTEM_MESSAGES[agentType] }\r\n    ]);\r\n    const [glMode, setGlMode] = useState(false);\r\n    const [isProcessingInput, setIsProcessingInput] = useState(false);\r\n    const audioMotionRef = useRef<AudioMotionAnalyzer | null>(null);\r\n\r\n    if (false)\r\n    useEffect(() => {\r\n        console.log('DEBUG')\r\n        setGlMode(true);\r\n        setConversation(null);\r\n        startRecording();\r\n\r\n        setTimeout(() => {\r\n            const msg = agentType === 'inbound' ? 'Hey there? how are you?' : 'Hello hello AI-buddy!'\r\n            setLatestUserMessage(msg)\r\n            sendAudioMessage(msg, agentType === 'inbound');\r\n        }, 5000);\r\n    }, [])\r\n\r\n\r\n    const endConversation = useCallback(async () => {\r\n        console.log('endConversation called, conversation state:', conversation);\r\n        if (!conversation) {\r\n            console.log('No active conversation to end');\r\n            return\r\n        }\r\n        try {\r\n            await conversation.endSession()\r\n            console.log('Conversation ended successfully');\r\n            setConversation(null)\r\n        } catch (error) {\r\n            console.error('Error ending conversation:', error);\r\n            throw error; // Re-throw to be caught by caller\r\n        }\r\n    }, [conversation]);\r\n\r\n    const handleMessage = useCallback(({message, source}: {message: string, source: string}) => {\r\n        console.log('onMessage', message, source);\r\n        // Only add messages from the initial voice conversation\r\n        // GL mode messages are handled separately\r\n        if (!glMode) {\r\n            setLLMChat(prevChat => [...prevChat, {\r\n                role: source === 'ai' ? 'assistant' : 'user',\r\n                content: message\r\n            }]);\r\n        }\r\n    }, [glMode, setLLMChat]);\r\n\r\n    const genMyNextMessage = useCallback(async (messages: Message[] = llmChat): Promise<string> => {\r\n        try {\r\n            const response = await fetch('/api/chat', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({\r\n                    messages,\r\n                    agentType,\r\n                    sessionId\r\n                }),\r\n            });\r\n\r\n            if (!response.ok) {\r\n                throw new Error('Failed to get AI response');\r\n            }\r\n\r\n            const data = await response.json();\r\n            const newMessage = data.content || '';\r\n            const formattedMessage = !newMessage.startsWith('[GL MODE]:') ? '[GL MODE]: ' + newMessage : newMessage;\r\n\r\n            // Update the chat history with the AI's response\r\n            setLLMChat(prevChat => [...prevChat, {\r\n                role: 'assistant',\r\n                content: formattedMessage\r\n            }]);\r\n\r\n            return formattedMessage.replace('[GL MODE]: ', ''); // remove prefix for audio\r\n        } catch (error) {\r\n            console.error('Error generating next message:', error);\r\n            return \"I apologize, but I'm having trouble generating a response right now.\";\r\n        }\r\n    }, [llmChat, agentType, sessionId]);\r\n\r\n    useEffect(() => {\r\n        setMounted(true);\r\n\r\n        const handleRecordingMessage = async (message: string) => {\r\n            if (isProcessingInput) return; // ignore or queue up\r\n            setIsProcessingInput(true);\r\n            try {\r\n                // Create new messages array with user message\r\n                const newMessages = [...llmChat, { role: 'user' as const, content: '[GL MODE]: ' + message }];\r\n                // Update state with new messages\r\n                setLLMChat(newMessages);\r\n                setGlMode(true);\r\n\r\n                await endConversation();\r\n\r\n                // Pass the updated messages to genMyNextMessage\r\n                const nextMessage = await genMyNextMessage(newMessages);\r\n                setLatestUserMessage(nextMessage);\r\n                sendAudioMessage(nextMessage, agentType === 'inbound');\r\n            } finally {\r\n                setIsProcessingInput(false);\r\n            }\r\n        };\r\n\r\n        audioMessageEmitter.on('recordingMessage', handleRecordingMessage);\r\n        return () => {\r\n            audioMessageEmitter.off('recordingMessage', handleRecordingMessage);\r\n        };\r\n    }, [endConversation, genMyNextMessage, setLLMChat, setLatestUserMessage, setGlMode, isProcessingInput, llmChat, agentType]);\r\n\r\n    // Initialize AudioMotion-Analyzer when glMode is activated\r\n    useEffect(() => {\r\n        if (glMode && mounted) {\r\n            const context = getcontext();\r\n            if (!context) {\r\n                console.log('no context exiting') \r\n                return;\r\n            }\r\n\r\n            // Create global analyzer node if not exists\r\n            createAnalyserNode();\r\n            const analyserNode = getAnalyserNode();\r\n            if (!analyserNode) {\r\n                console.log('Failed to create analyser node');\r\n                return;\r\n            }\r\n\r\n            // Initialize AudioMotion-Analyzer\r\n            if (!audioMotionRef.current) {\r\n                const container = document.getElementById('audioviz');\r\n                if (!container) return;\r\n\r\n                audioMotionRef.current = new AudioMotionAnalyzer(container, {\r\n                    source: analyserNode,\r\n                    height: 300,\r\n                    mode: 6, // Oscilloscope mode\r\n                    fillAlpha: 0.7,\r\n                    lineWidth: 2,\r\n                    showScaleX: false,\r\n                    showScaleY: false,\r\n                    reflexRatio: 0.2,\r\n                    showBgColor: false,\r\n                    showPeaks: true,\r\n                    gradient: agentType === 'inbound' ? 'steelblue' : 'orangered',\r\n                    smoothing: 0.7,\r\n                });\r\n            }\r\n\r\n            return () => {\r\n                if (audioMotionRef.current) {\r\n                    audioMotionRef.current.destroy();\r\n                    audioMotionRef.current = null;\r\n                }\r\n            };\r\n        }\r\n    }, [glMode, mounted]);\r\n\r\n    async function startConversation() {\r\n        setIsLoading(true)\r\n        try {\r\n            const hasPermission = await requestMicrophonePermission()\r\n            if (!hasPermission) {\r\n                alert(\"No permission\")\r\n                return;\r\n            }\r\n            const currentAgentId = agentType === 'inbound' ? INBOUND_AGENT_ID : OUTBOUND_AGENT_ID;\r\n            if (!currentAgentId) {\r\n                alert(\"Agent ID not configured\");\r\n                return;\r\n            }\r\n            const signedUrl = await getSignedUrl(currentAgentId)\r\n            const conversation = await Conversation.startSession({\r\n                signedUrl: signedUrl,\r\n                onConnect: () => {\r\n                    console.log('Conversation connected');\r\n                    setIsConnected(true)\r\n                    setIsSpeaking(true)\r\n                    if (agentType === 'inbound') {\r\n                        startRecording();\r\n                    }\r\n                },\r\n                onDisconnect: () => {\r\n                    console.log('Conversation disconnected');\r\n                    setIsConnected(false)\r\n                    setIsSpeaking(false)\r\n                    setIsLoading(false)\r\n                },\r\n                clientTools: {\r\n                    gibbMode: async (params: any) => {\r\n                      console.log('gibbMode, START INTERVAL, should only happen once', params);\r\n                      try {\r\n                        await conversation.endSession();\r\n                        const nextMessage = 'is it better now?';\r\n                        setLLMChat(prevChat => [...prevChat, {\r\n                            role: 'assistant',\r\n                            content: '[GL MODE]: yep, GL mode activated',\r\n                        }, {\r\n                            role: 'user',\r\n                            content: '[GL MODE]: ' +nextMessage\r\n                        }]);\r\n                        setGlMode(true);\r\n                        console.log('Conversation ended successfully in gibbMode');\r\n                        setConversation(null);\r\n                        await startRecording();\r\n                        setLatestUserMessage(nextMessage);\r\n                        await sendAudioMessage(nextMessage, agentType === 'inbound');\r\n                      } catch (error) {\r\n                        console.error('Error in gibbMode:', error);\r\n                      }\r\n                      \r\n                      return 'entering GibberLink mode'\r\n                    }\r\n                },\r\n                onMessage: handleMessage,\r\n                onError: (error) => {\r\n                    console.log(error)\r\n                    alert('An error occurred during the conversation')\r\n                },\r\n                onModeChange: ({mode}) => {\r\n                    console.log('onModeChange', mode);\r\n                    setIsSpeaking(mode === 'speaking')\r\n                },\r\n            })\r\n            console.log('Setting conversation state:', conversation);\r\n            setConversation(conversation)\r\n            //initAudio(conversation.input.context, conversation.input.inputStream)\r\n            //console.log(conversation.input.inputStream)\r\n        } catch (error) {\r\n            console.error('Error starting conversation:', error)\r\n            alert('An error occurred while starting the conversation')\r\n        } finally {\r\n            setIsLoading(false)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Script src=\"/ggwave/ggwave.js\" strategy=\"afterInteractive\" />\r\n            <div className=\"fixed inset-0\">\r\n                {latestUserMessage && (\r\n                    <div \r\n                        key={`message-${latestUserMessage}`}\r\n                        className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-[200px] z-10 text-3xl md:text-5xl w-full px-8 text-center font-normal\"\r\n                        style={{\r\n                            padding: '0.5rem 1rem',\r\n                            color: 'white',\r\n                            wordBreak: 'break-word',\r\n                            textShadow: `\r\n                                -1px -1px 0 #000,  \r\n                                1px -1px 0 #000,\r\n                                -1px 1px 0 #000,\r\n                                1px 1px 0 #000,\r\n                                0px 0px 8px rgba(0,0,0,0.5)\r\n                            `\r\n                        }}\r\n                    >\r\n                        {latestUserMessage}\r\n                    </div>\r\n                )}\r\n                \r\n                <div className=\"h-full w-full flex items-center justify-center\">\r\n                    <div id=\"audioviz\" style={{ marginLeft: \"-150px\", width: \"400px\", height: \"300px\", display: glMode ? 'block' : 'none' }} />\r\n                    {!glMode && <div className={cn('orb',\r\n                        isSpeaking ? 'animate-orb' : (conversation && 'animate-orb-slow'),\r\n                        isConnected || glMode ? 'orb-active' : 'orb-inactive',\r\n                        agentType\r\n                    )}\r\n                    onClick={() => {\r\n                        if (!conversation && !isConnected && !isLoading) {\r\n                            const newAgentType = agentType === 'inbound' ? 'outbound' : 'inbound';\r\n                            setAgentType(newAgentType);\r\n                            setLLMChat([{ role: 'system', content: SYSTEM_MESSAGES[newAgentType] }]);\r\n                        }\r\n                    }}\r\n                    style={{ cursor: conversation || isConnected || isLoading || glMode ? 'default' : 'pointer' }}\r\n                    ></div>}\r\n                </div>\r\n\r\n                {mounted && (\r\n                    <div className=\"fixed bottom-[40px] md:bottom-[60px] left-1/2 transform -translate-x-1/2\">\r\n                        <Button\r\n                            variant={'outline'}\r\n                            className={'rounded-full select-none'}\r\n                            size={\"lg\"}\r\n                            disabled={isLoading}\r\n                            onClick={conversation || isConnected || glMode ? endConversation : startConversation}\r\n                            tabIndex={-1}\r\n                        >\r\n                            {isLoading ? 'Connecting...' : (conversation || isConnected || glMode ? 'End conversation' : 'Start conversation')}\r\n                        </Button>\r\n                    </div>\r\n                )}\r\n            </div>\r\n        </>\r\n    )\r\n}"],"names":[],"mappings":"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"}},
    {"offset": {"line": 769, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 775, "column": 0}, "map": {"version":3,"sources":["file://D%3A/Web%20Development/Chaicodebackend/Soundwave%20generator/gibberlink/src/app/page.tsx"],"sourcesContent":["\"use client\"\r\nimport {ConvAI} from \"../components/ConvAI\";\r\nimport AudioMessenger from \"../components/AudioMessenger\";\r\nexport default function Home() {\r\n    return (\r\n        <div\r\n            className=\"grid grid-rows-[20px_1fr_20px] items-center justify-items-center min-h-screen p-8 pb-20 gap-16 sm:p-20\">\r\n            <main className=\"flex flex-col md:flex-row gap-8 row-start-2 items-center\">\r\n                <ConvAI/>\r\n            </main>\r\n        </div>\r\n    );\r\n}\r\n\r\n                //<ConvAI/>\r\n                //<AudioMessenger/>\r\n\r\n                // https://d4c44f081440.ngrok.app/"],"names":[],"mappings":";;;;AACA;AADA;;;AAGe,SAAS;IACpB,qBACI,6LAAC;QACG,WAAU;kBACV,cAAA,6LAAC;YAAK,WAAU;sBACZ,cAAA,6LAAC,+HAAA,CAAA,SAAM;;;;;;;;;;;;;;;AAIvB,EAEgB,WAAW;CACX,mBAAmB;CAEnB,kCAAkC;KAd1B"}},
    {"offset": {"line": 812, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}